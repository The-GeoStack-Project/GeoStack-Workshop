# Below the User of the NGINX webserver is set to root.
# This means that the NGINX Webserver works with root privileges.
user  root;

# Below the number of worker processes, used by the NGINX webserver, are set to 1.
# In case your NGINX webserver will is going to perform intensive processes (E.G. g-zipping)
# you should increment this number.
worker_processes  1;

events {

    # Below, the amount of worker connections is declared. The amount of
    # worker_connections times (*) the amount of worker_processes is the amount of
    # users that can be connected to the NGINX webserver at once.
    worker_connections  1024;
}

http {
    # The following applies to the code below:
    #  - The name of the upstream server is set to flask-api so if we want to use the upstream
    #    server throughout our NGINX configuration, we can use flask-api instead of:
    #    "localhost:5000".
    #  - The server on which the Flask-API will be running is on the localhost (Your laptop)
    #  - The port on which the Flask-API will be running is port 5000. This can be changed
    #    in the Flask-API.
    upstream flask-api { server localhost:5000; }

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #                                   START ASSIGNMENT 8                                  #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #                                                                                       #
    #       Define the upstream server for the Tilestache Tileserver                        #
    #                                                                                       #
    #       To define an upstream server you first have to give a suitable name.            #
    #                                                                                       #
    #       Then you define the server on which the server is running.                      #
    #       TIP: All the servers are running on your own laptop (Locally)                   #
    #                                                                                       #
    #       Finally you declare the port on which the Tilestache server is running.         #
    #       TIP: This can be found in the slides.                                           #
    #                                                                                       #
    #                                                                                       #
    #       In case you get stuck, you can look at the line on which the upstream server    #
    #       for the Flask-API is defined (line 26)                                          #
    #                                                                                       #
    #       TIP: The name which has to be given to the upstream server is already used in   #
    #            this configuration file. If you change this name the answer will not be    #
    #            correct!                                                                   #
    #                                                                                       #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

    #TODO
    upstream tilestache-server{ server localhost:8080; }

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #                                   EINDE OPDRACHT 8                                    #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

    server {

        # Below, the port is defined on which the NGINX webserver is listening for requests.
        # These requests will be coming from the Frontend (Web application) and will be
        # send by the User.
        #
        # A few examples of these requests are as follows:
        # - A map from our Tilestache Server for example the OpenStreetMap.
        # - All trackers in our Crane database, this is done by sending an request to the
        #   Flask-API which will then trigger a function in which a query is defined.
        # - All GPS-Routes (Trails) in our Trail database, this is also
        #   done by sending an request to the Flask-API which will then trigger a
        #   function in which a query is defined.
        #
        # All the requests will first be send to the NGINX webserver which is running on
        # port 80 (localhost:80) and the NGINX webserver will then proxy the server
        # for which the request was meant.
        listen       80;

        # Below we define the location on which the HTML file, representing the landing page
        # of our NGINX Webserver, is located. The landing page is available on the URL:
        # localhost/ or localhost:80/
        # In the Complete Geostack Course You will create your own landing page.
        # During this workshop we will use the default landing page provided by NGINX.
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        # Below we define the location on which the Flask-API will be accessible via the NGINX
        # webserver.
        # The Flask-API will be accessible on the URL: "http://localhost/api/"
        # Then we set the upstream server: "flask-api" to be the server that will be proxied
        # when we navigate to the URL mentioned above.
        #
        # So when navigating to http://localhost/api/, http://localhost:5000 will be proxied.
        location /api/ { proxy_pass http://flask-api; }

        # Below we define the location on which the LandscapeMap will be accessible via the NGINX
        # webserver. The landscapemap will be accessible via the URL:
        # http://localhost/tiles/landscapemap/
        #
        # The URL that will be proxied exists of the following:
        # - The name of the upstream tilestache server, which you defined in assignment 8.
        # - The name of the landscapemap entry in the tilestache configuration.
        #
        # Again the upstream server: "tilestache-server" is used.
        # So when we navigate to http://localhost/tiles/landscapemap/,
        # http://localhost:8080/landscapemap/ will be proxied.

        location /tiles/landscapemap/ { proxy_pass http://tilestache-server/landscapemap/; }

        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
        #                                   START ASSIGNMENT 9                                  #
        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
        #                                                                                       #
        #       Define the location on which the OpenStreetMap map should be accessible         #
        #       via the NGINX Webserver.                                                        #
        #                                                                                       #
        #       To define a location you should first declare the URL on which the map          #
        #       should be accessible via the NGINX webserver.                                   #
        #       TIP: the name of the location should be /tiles/openstreetmap since the name     #
        #            of our tilestache entry, related to the OpenStreetMap WMS, is called:      #
        #            "openstreetmap".                                                           #
        #                                                                                       #
        #       The location which you declare will be added after the location of the server.  #
        #       So if you define helloworld as location, the location on which the              #
        #       openstreetmap will be accessible is as follows: http://localhost/hello-world    #
        #                                                                                       #
        #       You also need to declare the proxy which has to be passed.                      #
        #       TIP: When doing this think about what you did in exercise 8.                    #
        #                                                                                       #
        #       In case you get stuck, you can look at the line on which location of the        #
        #       landscapemap is defined (see line 109)                                          #
        #                                                                                       #
        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

        #TODO
        location /tiles/openstreetmap/ { proxy_pass http://tilestache-server/openstreetmap/; }


        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
        #                                   END ASSIGNMENT 9                                    #
        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    }
}
